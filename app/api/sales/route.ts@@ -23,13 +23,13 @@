import { NextResponse } from 'next/server';
import { TransactionRepository } from '@/db/repositories/TransactionRepository';
import { ProductRepository } from '@/db/repositories/ProductRepository';
import { UserRepository } from '@/db/repositories/UserRepository';
import { GetCurrentSession } from '@/lib/auth';

export async function GET(request: Request) {
  try {
    const { searchParams } = new URL(request.url);
    const startDateStr = searchParams.get('startDate');
    const endDateStr = searchParams.get('endDate');

    if (!startDateStr || !endDateStr) {
      return NextResponse.json({ status: 'error', message: 'Missing startDate or endDate' }, { status: 400 });
    }

    const startDate = new Date(startDateStr);
    const endDate = new Date(endDateStr);
    endDate.setHours(23, 59, 59, 999); // Include the whole end day
    
    const transactions = await TransactionRepository.GetByDateRange(startDate, endDate);
    
    const sales = [];
    for (const { Transactions: transaction, Users: user } of transactions) {
      const items = await TransactionRepository.GetItemsByTransactionId(transaction.TransactionId);
      for (const item of items) {
        const price = parseFloat(item.TransactionItems.PriceAtTimeOfSale);
        const quantity = item.TransactionItems.Quantity;
        const profit = parseFloat(item.TransactionItems.Profit);
        sales.push({
          id: transaction.TransactionId,
          productName: item.Products?.Name || 'N/A',
          quantity: quantity,
          price: price,
          total: quantity * price,
          profit: profit,
          createdAt: transaction.Timestamp.toISOString(),
          cashierName: user?.Name || 'N/A',
          paymentMethod: transaction.PaymentMethod,
        });
      }
    }
    
    const totalRevenue = sales.reduce((sum, sale) => sum + sale.total, 0);
    const totalProfit = sales.reduce((sum, sale) => sum + sale.profit, 0);
    
    const report = {
      totalRevenue,
      totalSales: sales.length,
      totalProfit,
      sales: sales,
    };

    return NextResponse.json({ status: 'success', report });

  } catch (error) {
    console.error("Error in /api/sales:", error);
    return NextResponse.json({ status: 'error', message: 'Internal Server Error' }, { status: 500 });
  }
}
